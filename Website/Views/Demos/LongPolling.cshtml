@{ var serviceUrl = Url.Content("~/Handlers/NewsFeedLongPolling.ashx"); }

<h2>Real-Time Technique: Long Polling</h2>

<div>
    <p><strong>Long Polling</strong> makes a continuous stream of requests to a resource, but the request doesn't come back until there is data to return</p>
    <p>The following demo calls <a href="@serviceUrl">@serviceUrl</a> and waits for a response</p>
</div>

<section>
    
    <span>Started: <span id="enabled">false</span></span>
    <button id="toggle-button">Start/Stop</button>

    <div id="demo"></div>
</section>

<section>
    <h3>Server-Side Code</h3>
    @Html.RenderSourceCode("~/Handlers/NewsFeedLongPolling.ashx")

    <h3>Client-Side Code</h3>
    <pre id="code"></pre>
</section>

<script id="script-block" type="text/javascript">
    $(function () {
        var lastStory = 0;

        function renderStories(stories) {
            for (var i = 0; i < stories.length; i++) {
                var story = stories[i];
                var html =
                    '<div class="story">' +
                        '<p class="title">' + story.Id + ': <a href="' + story.Link + '">' + story.Title + '</a></p>' +
                        '<p class="description">' + story.Description + '</p>' +
                    '</div>';
                $('#demo').prepend(html);

                if (lastStory < story.Id)
                    lastStory = story.Id;
            }
        }

        function enabled(val) {
            return $('#enabled').text(val) == 'true';
        }

        function updateTime() {
            if (!enabled())
                return;

            $.ajax('@serviceUrl?last=' + lastStory)
                .success(renderStories)
                // Queue a new request (here's where the loop is!)
                .complete(function () { setTimeout(updateTime, 10); });
        }

        $('#toggle-button').click(function () {
            enabled(!enabled());
            updateTime();
        });
    });
</script>